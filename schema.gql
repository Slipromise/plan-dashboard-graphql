# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BasePayload {
  isSuccess: Boolean!
  message: String
}

type Comment {
  content: String!
  creator: User!
  date: String!
  id: ID!
  isActivity: Boolean
  task: Task!
}

input CommentAddInput {
  content: String!
  taskId: ID!
}

type Mutation {
  commentAdd(CommentAddInput: CommentAddInput!): BasePayload!
  planAdd(PlanAddInput: PlanAddInput!): BasePayload!
  planRemove(planId: String!): BasePayload!
  planSetter(PlanSetterInput: PlanSetterInput!): BasePayload!
  taskAdd(TaskAddInput: TaskAddInput!): BasePayload!
  taskSetter(SetterTaskInput: TaskSetterInput!): BasePayload!
  userLogin(LoginInput: UserLoginInput!): UserLoginPayload!
  userRegister(userRegisterInput: UserRegisterInput!): UserRegisterPayload!
  userSetter(ModifyUserInput: UserSettingInput!): BasePayload!
}

type Plan {
  buckets: [String!]!
  creator: User!
  description: String
  id: ID!
  isCurrent: Boolean
  isFavorite: Boolean
  members: [User!]!
  name: String!
  tasks: [Task!]
}

input PlanAddInput {
  description: String
  name: String!
}

input PlanSetterInput {
  bucket: String
  description: String
  id: ID!
  isFavorite: Boolean
  memberId: ID
}

type Query {
  comment(commentId: String!): Comment!
  comments(cursorId: ID, size: Int = 15, taskId: ID): [Comment!]!
  me: User!
  plan(planId: String!): Plan!
  plans(cursorId: ID, isCurrent: Boolean, isFavorite: Boolean, memberID: ID, name: String, size: Float): [Plan!]!
  task(taskId: String!): Task!
  tasks(bucket: String, cursorId: ID, planId: ID, size: Float = 15, status: TaskStatus, title: String, userId: ID): [Task!]!
  user(userId: String!): User!
  users(email: String, name: String, size: Float = 10): [User!]!
}

type Task {
  bucket: String!
  comments(cursorId: ID, size: Float = 15): [Comment!]
  commentsLength: Float
  description: String
  endDate: String
  id: ID!
  participators(size: Float = 5): [User!]
  participatorsLength: Float
  plan: Plan!
  startDate: String
  status: TaskStatus!
  statusOptions: [TaskStatus!]!
  title: String!
}

input TaskAddInput {
  bucket: String = "Todo"
  planId: ID!
  title: String!
}

input TaskSetterInput {
  bucket: String
  description: String
  endDate: String
  id: ID!
  participatorsId: ID
  planId: ID
  startDate: String
  status: TaskStatus
  title: String
}

enum TaskStatus {
  ACCEPTING
  COMPLETE
  FAIL
  INITIAL
  PENDING
  PROGRESS
}

type User {
  authToken: String
  avatar: String
  email: String!
  id: ID!
  name: String!
  password: String!
  plans(cursorId: ID, size: Float = 20): [Plan!]
  roles: [UserRole!]!
  tasks(cursorId: ID, size: Float = 20): [Task!]
}

input UserLoginInput {
  email: String!
  password: String!
}

type UserLoginPayload {
  isSuccess: Boolean!
  message: String
  token: String
}

input UserRegisterInput {
  email: String!
  password: String!
}

type UserRegisterPayload {
  isSuccess: Boolean!
  message: String
  token: String
}

enum UserRole {
  ADMIN
  MANAGER
  MEMBER
}

input UserSettingInput {
  avatar: String
  name: String
}
