# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddCommentInput {
  content: String!
  taskId: ID!
}

input AddPlanInput {
  creatorId: ID!
  description: String
}

input AddTaskInput {
  bucket: String = "Todo"
  planId: ID!
  title: String!
}

type Comment {
  content: String!
  creator: User!
  date: String!
  id: ID!
  isActivity: Boolean
  task: Task!
}

type LoginPayload {
  isSuccess: Boolean!
  message: String!
  token: String
}

input ModifyPlanInput {
  bucket: String
  description: String
  isFavorite: Boolean
  memberId: ID
}

input ModifyTaskInput {
  bucket: String
  description: String
  endDate: String
  participatorsId: ID
  planId: ID
  startDate: String
  status: TaskStatus
  title: String
}

input ModifyUserInput {
  avatar: String
  name: String
}

type Mutation {
  ModifyPlan(ModifyPlanInput: ModifyPlanInput!): Plan!
  addComment(AddCommentInput: AddCommentInput!): Comment!
  addPlan(AddPlanInput: AddPlanInput!): Plan!
  addTask(AddTaskInput: AddTaskInput!): Task!
  login: LoginPayload!
  modifyTask(ModifyTaskInput: ModifyTaskInput!): Task!
  modifyUser(ModifyUserInput: ModifyUserInput!): User!
  registerUser(RegisterUserInput: RegisterUserInput!): User!
  removePlan(planId: String!): Plan!
}

type Plan {
  buckets: [String!]!
  creator: User!
  description: String
  id: ID!
  isCurrent: Boolean
  isFavorite: Boolean
  members: [User!]!
  name: String!
  tasks: [Task!]
}

type Query {
  plan(planId: String!): Plan!
  plans: [Plan!]!
  user(userId: String!): User!
  users: [User!]!
}

input RegisterUserInput {
  email: String!
  password: String!
}

type Task {
  bucket: String!
  comments: [Comment!]
  description: String
  endDate: String
  id: ID!
  participators: [User!]
  plan: Plan!
  startDate: String
  status: TaskStatus!
  title: String!
}

enum TaskStatus {
  ACCEPTING
  COMPLETE
  FAIL
  INITIAL
  PENDING
  PROGRESS
}

type User {
  authToken: String
  avatar: String
  email: String!
  id: ID!
  name: String!
  password: String!
  plans: [Plan!]
  roles: [UserRole!]!
  tasks: [Task!]
}

enum UserRole {
  ADMIN
  MANAGER
  MEMBER
}
